basePath: /
definitions:
  handler.createConcertRequest:
    properties:
      date:
        example: "2025-01-01T10:00:00+07:00"
        type: string
      name:
        example: Concert Name
        type: string
      venue:
        example: Concert Venue
        type: string
    required:
    - date
    - name
    - venue
    type: object
  handler.createConcertResponse:
    properties:
      date:
        example: "2025-01-01T10:00:00+07:00"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Concert Name
        type: string
      venue:
        example: Concert Venue
        type: string
    type: object
  handler.findAllConcertsResponse:
    properties:
      date:
        example: "2025-01-01T10:00:00+07:00"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Concert Name
        type: string
      venue:
        example: Concert Venue
        type: string
    type: object
  handler.findOneConcertResponse:
    properties:
      date:
        example: "2025-01-01T10:00:00+07:00"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Concert Name
        type: string
      venue:
        example: Concert Venue
        type: string
    type: object
  handler.livenessResponse:
    properties:
      status:
        example: OK
        type: string
    type: object
  handler.readinessResponse:
    properties:
      status:
        example: OK
        type: string
    type: object
  httpresponse.ErrorResponse:
    properties:
      code:
        example: TR-XXXXXX
        type: string
      data: {}
      message:
        example: Error message
        type: string
    type: object
  httpresponse.SuccessResponse:
    properties:
      code:
        example: TR-200000
        type: string
      data: {}
      metadata: {}
    type: object
host: localhost:8080
info:
  contact:
    email: k.poonyakariyakorn@gmail.com
    name: Kittipat Poonyakariyakorn
  description: This is a ticket reservation system API.
  title: Ticket Reservation API
  version: "1.0"
paths:
  /concerts:
    get:
      description: List all concerts, filterable by date range and venue
      parameters:
      - description: 'Start date (format: 2006-01-02) (UTC+7)'
        in: query
        name: startDate
        type: string
      - description: 'End date (format: 2006-01-02) (UTC+7)'
        in: query
        name: endDate
        type: string
      - description: Venue name (partial match)
        in: query
        name: venue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of concerts
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.findAllConcertsResponse'
                  type: array
                metadata:
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: List Concerts
      tags:
      - Concert
    post:
      consumes:
      - application/json
      description: Create a new concert
      parameters:
      - description: Concert creation input
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createConcertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Concert created
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.createConcertResponse'
                metadata:
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Create Concert
      tags:
      - Concert
  /concerts/{id}:
    get:
      description: Retrieve concert details by its ID
      parameters:
      - description: Concert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Concert found
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.findOneConcertResponse'
                metadata:
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Concert not found
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Find Concert by ID
      tags:
      - Concert
  /health/liveness:
    get:
      description: Check the liveness of the service
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.livenessResponse'
                metadata:
                  type: object
              type: object
        default:
          description: Default error response
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BasicAuth: []
      summary: Liveness
      tags:
      - HealthCheck
  /health/readiness:
    get:
      description: Check the readiness of the service
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.readinessResponse'
                metadata:
                  type: object
              type: object
        default:
          description: Default error response
          schema:
            allOf:
            - $ref: '#/definitions/httpresponse.ErrorResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BasicAuth: []
      summary: Readiness
      tags:
      - HealthCheck
schemes:
- https
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
