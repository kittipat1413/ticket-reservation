// Code generated by MockGen. DO NOT EDIT.
// Source: ./zone_repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	repository "ticket-reservation/internal/domain/repository"
	db "ticket-reservation/internal/infra/db"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockZoneRepository is a mock of ZoneRepository interface.
type MockZoneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockZoneRepositoryMockRecorder
}

// MockZoneRepositoryMockRecorder is the mock recorder for MockZoneRepository.
type MockZoneRepositoryMockRecorder struct {
	mock *MockZoneRepository
}

// NewMockZoneRepository creates a new mock instance.
func NewMockZoneRepository(ctrl *gomock.Controller) *MockZoneRepository {
	mock := &MockZoneRepository{ctrl: ctrl}
	mock.recorder = &MockZoneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoneRepository) EXPECT() *MockZoneRepositoryMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockZoneRepository) FindOne(ctx context.Context, id uuid.UUID) (*entity.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*entity.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockZoneRepositoryMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockZoneRepository)(nil).FindOne), ctx, id)
}

// WithTx mocks base method.
func (m *MockZoneRepository) WithTx(tx db.SqlExecer) repository.ZoneRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.ZoneRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockZoneRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockZoneRepository)(nil).WithTx), tx)
}
