// Code generated by MockGen. DO NOT EDIT.
// Source: ./seat_repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	repository "ticket-reservation/internal/domain/repository"
	db "ticket-reservation/internal/infra/db"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSeatRepository is a mock of SeatRepository interface.
type MockSeatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeatRepositoryMockRecorder
}

// MockSeatRepositoryMockRecorder is the mock recorder for MockSeatRepository.
type MockSeatRepositoryMockRecorder struct {
	mock *MockSeatRepository
}

// NewMockSeatRepository creates a new mock instance.
func NewMockSeatRepository(ctrl *gomock.Controller) *MockSeatRepository {
	mock := &MockSeatRepository{ctrl: ctrl}
	mock.recorder = &MockSeatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatRepository) EXPECT() *MockSeatRepositoryMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockSeatRepository) FindOne(ctx context.Context, id uuid.UUID) (*entity.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*entity.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockSeatRepositoryMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockSeatRepository)(nil).FindOne), ctx, id)
}

// UpdateOne mocks base method.
func (m *MockSeatRepository) UpdateOne(ctx context.Context, input repository.UpdateSeatInput) (*entity.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, input)
	ret0, _ := ret[0].(*entity.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockSeatRepositoryMockRecorder) UpdateOne(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockSeatRepository)(nil).UpdateOne), ctx, input)
}

// WithTx mocks base method.
func (m *MockSeatRepository) WithTx(tx db.SqlExecer) repository.SeatRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.SeatRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockSeatRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockSeatRepository)(nil).WithTx), tx)
}
