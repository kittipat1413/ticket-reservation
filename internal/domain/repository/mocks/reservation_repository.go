// Code generated by MockGen. DO NOT EDIT.
// Source: ./reservation_repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	repository "ticket-reservation/internal/domain/repository"
	db "ticket-reservation/internal/infra/db"

	gomock "github.com/golang/mock/gomock"
)

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockReservationRepository) CreateOne(ctx context.Context, reservation *entity.Reservation) (*entity.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, reservation)
	ret0, _ := ret[0].(*entity.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockReservationRepositoryMockRecorder) CreateOne(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockReservationRepository)(nil).CreateOne), ctx, reservation)
}

// FindAll mocks base method.
func (m *MockReservationRepository) FindAll(ctx context.Context, filter repository.FindAllReservationsFilter) (*entity.Reservations, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].(*entity.Reservations)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockReservationRepositoryMockRecorder) FindAll(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockReservationRepository)(nil).FindAll), ctx, filter)
}

// UpdateOne mocks base method.
func (m *MockReservationRepository) UpdateOne(ctx context.Context, input repository.UpdateReservationInput) (*entity.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, input)
	ret0, _ := ret[0].(*entity.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockReservationRepositoryMockRecorder) UpdateOne(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockReservationRepository)(nil).UpdateOne), ctx, input)
}

// WithTx mocks base method.
func (m *MockReservationRepository) WithTx(tx db.SqlExecer) repository.ReservationRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.ReservationRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockReservationRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockReservationRepository)(nil).WithTx), tx)
}
