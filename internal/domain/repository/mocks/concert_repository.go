// Code generated by MockGen. DO NOT EDIT.
// Source: ./concert_repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	repository "ticket-reservation/internal/domain/repository"
	db "ticket-reservation/internal/infra/db"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockConcertRepository is a mock of ConcertRepository interface.
type MockConcertRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConcertRepositoryMockRecorder
}

// MockConcertRepositoryMockRecorder is the mock recorder for MockConcertRepository.
type MockConcertRepositoryMockRecorder struct {
	mock *MockConcertRepository
}

// NewMockConcertRepository creates a new mock instance.
func NewMockConcertRepository(ctrl *gomock.Controller) *MockConcertRepository {
	mock := &MockConcertRepository{ctrl: ctrl}
	mock.recorder = &MockConcertRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcertRepository) EXPECT() *MockConcertRepositoryMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockConcertRepository) CreateOne(ctx context.Context, concert *entity.Concert) (*entity.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, concert)
	ret0, _ := ret[0].(*entity.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockConcertRepositoryMockRecorder) CreateOne(ctx, concert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockConcertRepository)(nil).CreateOne), ctx, concert)
}

// FindOne mocks base method.
func (m *MockConcertRepository) FindOne(ctx context.Context, id uuid.UUID) (*entity.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*entity.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockConcertRepositoryMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockConcertRepository)(nil).FindOne), ctx, id)
}

// WithTx mocks base method.
func (m *MockConcertRepository) WithTx(tx db.SqlExecer) repository.ConcertRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.ConcertRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockConcertRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockConcertRepository)(nil).WithTx), tx)
}
