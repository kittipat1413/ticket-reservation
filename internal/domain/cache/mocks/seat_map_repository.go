// Code generated by MockGen. DO NOT EDIT.
// Source: ./seat_map_repository.go

// Package cache_mocks is a generated GoMock package.
package cache_mocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSeatMapRepository is a mock of SeatMapRepository interface.
type MockSeatMapRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeatMapRepositoryMockRecorder
}

// MockSeatMapRepositoryMockRecorder is the mock recorder for MockSeatMapRepository.
type MockSeatMapRepositoryMockRecorder struct {
	mock *MockSeatMapRepository
}

// NewMockSeatMapRepository creates a new mock instance.
func NewMockSeatMapRepository(ctrl *gomock.Controller) *MockSeatMapRepository {
	mock := &MockSeatMapRepository{ctrl: ctrl}
	mock.recorder = &MockSeatMapRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatMapRepository) EXPECT() *MockSeatMapRepositoryMockRecorder {
	return m.recorder
}

// GetAllSeats mocks base method.
func (m *MockSeatMapRepository) GetAllSeats(ctx context.Context, concertID, zoneID uuid.UUID) (*entity.Seats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSeats", ctx, concertID, zoneID)
	ret0, _ := ret[0].(*entity.Seats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSeats indicates an expected call of GetAllSeats.
func (mr *MockSeatMapRepositoryMockRecorder) GetAllSeats(ctx, concertID, zoneID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSeats", reflect.TypeOf((*MockSeatMapRepository)(nil).GetAllSeats), ctx, concertID, zoneID)
}

// GetSeat mocks base method.
func (m *MockSeatMapRepository) GetSeat(ctx context.Context, concertID, zoneID uuid.UUID, seatNumber string) (*entity.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeat", ctx, concertID, zoneID, seatNumber)
	ret0, _ := ret[0].(*entity.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeat indicates an expected call of GetSeat.
func (mr *MockSeatMapRepositoryMockRecorder) GetSeat(ctx, concertID, zoneID, seatNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeat", reflect.TypeOf((*MockSeatMapRepository)(nil).GetSeat), ctx, concertID, zoneID, seatNumber)
}

// SetSeat mocks base method.
func (m *MockSeatMapRepository) SetSeat(ctx context.Context, concertID, zoneID uuid.UUID, seat entity.Seat, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSeat", ctx, concertID, zoneID, seat, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSeat indicates an expected call of SetSeat.
func (mr *MockSeatMapRepositoryMockRecorder) SetSeat(ctx, concertID, zoneID, seat, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeat", reflect.TypeOf((*MockSeatMapRepository)(nil).SetSeat), ctx, concertID, zoneID, seat, ttl)
}
