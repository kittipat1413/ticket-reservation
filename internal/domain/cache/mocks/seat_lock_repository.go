// Code generated by MockGen. DO NOT EDIT.
// Source: ./seat_lock_repository.go

// Package cache_mocks is a generated GoMock package.
package cache_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSeatLocker is a mock of SeatLocker interface.
type MockSeatLocker struct {
	ctrl     *gomock.Controller
	recorder *MockSeatLockerMockRecorder
}

// MockSeatLockerMockRecorder is the mock recorder for MockSeatLocker.
type MockSeatLockerMockRecorder struct {
	mock *MockSeatLocker
}

// NewMockSeatLocker creates a new mock instance.
func NewMockSeatLocker(ctrl *gomock.Controller) *MockSeatLocker {
	mock := &MockSeatLocker{ctrl: ctrl}
	mock.recorder = &MockSeatLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatLocker) EXPECT() *MockSeatLockerMockRecorder {
	return m.recorder
}

// LockSeat mocks base method.
func (m *MockSeatLocker) LockSeat(ctx context.Context, concertID, zoneID, seatID, token string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockSeat", ctx, concertID, zoneID, seatID, token, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockSeat indicates an expected call of LockSeat.
func (mr *MockSeatLockerMockRecorder) LockSeat(ctx, concertID, zoneID, seatID, token, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockSeat", reflect.TypeOf((*MockSeatLocker)(nil).LockSeat), ctx, concertID, zoneID, seatID, token, ttl)
}

// UnlockSeat mocks base method.
func (m *MockSeatLocker) UnlockSeat(ctx context.Context, concertID, zoneID, seatID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockSeat", ctx, concertID, zoneID, seatID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockSeat indicates an expected call of UnlockSeat.
func (mr *MockSeatLockerMockRecorder) UnlockSeat(ctx, concertID, zoneID, seatID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockSeat", reflect.TypeOf((*MockSeatLocker)(nil).UnlockSeat), ctx, concertID, zoneID, seatID, token)
}
