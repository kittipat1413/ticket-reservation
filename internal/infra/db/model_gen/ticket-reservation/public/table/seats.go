//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Seats = newSeatsTable("public", "seats", "")

type seatsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	ZoneID            postgres.ColumnString
	SeatNumber        postgres.ColumnString
	Status            postgres.ColumnString
	LockedUntil       postgres.ColumnTimestampz
	LockedBySessionID postgres.ColumnString
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type SeatsTable struct {
	seatsTable

	EXCLUDED seatsTable
}

// AS creates new SeatsTable with assigned alias
func (a SeatsTable) AS(alias string) *SeatsTable {
	return newSeatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeatsTable with assigned schema name
func (a SeatsTable) FromSchema(schemaName string) *SeatsTable {
	return newSeatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeatsTable with assigned table prefix
func (a SeatsTable) WithPrefix(prefix string) *SeatsTable {
	return newSeatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeatsTable with assigned table suffix
func (a SeatsTable) WithSuffix(suffix string) *SeatsTable {
	return newSeatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeatsTable(schemaName, tableName, alias string) *SeatsTable {
	return &SeatsTable{
		seatsTable: newSeatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newSeatsTableImpl("", "excluded", ""),
	}
}

func newSeatsTableImpl(schemaName, tableName, alias string) seatsTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		ZoneIDColumn            = postgres.StringColumn("zone_id")
		SeatNumberColumn        = postgres.StringColumn("seat_number")
		StatusColumn            = postgres.StringColumn("status")
		LockedUntilColumn       = postgres.TimestampzColumn("locked_until")
		LockedBySessionIDColumn = postgres.StringColumn("locked_by_session_id")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		allColumns              = postgres.ColumnList{IDColumn, ZoneIDColumn, SeatNumberColumn, StatusColumn, LockedUntilColumn, LockedBySessionIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{ZoneIDColumn, SeatNumberColumn, StatusColumn, LockedUntilColumn, LockedBySessionIDColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns          = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return seatsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		ZoneID:            ZoneIDColumn,
		SeatNumber:        SeatNumberColumn,
		Status:            StatusColumn,
		LockedUntil:       LockedUntilColumn,
		LockedBySessionID: LockedBySessionIDColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
