//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Concerts = newConcertsTable("public", "concerts", "")

type concertsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	Name      postgres.ColumnString
	Date      postgres.ColumnTimestampz
	Venue     postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ConcertsTable struct {
	concertsTable

	EXCLUDED concertsTable
}

// AS creates new ConcertsTable with assigned alias
func (a ConcertsTable) AS(alias string) *ConcertsTable {
	return newConcertsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConcertsTable with assigned schema name
func (a ConcertsTable) FromSchema(schemaName string) *ConcertsTable {
	return newConcertsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConcertsTable with assigned table prefix
func (a ConcertsTable) WithPrefix(prefix string) *ConcertsTable {
	return newConcertsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConcertsTable with assigned table suffix
func (a ConcertsTable) WithSuffix(suffix string) *ConcertsTable {
	return newConcertsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConcertsTable(schemaName, tableName, alias string) *ConcertsTable {
	return &ConcertsTable{
		concertsTable: newConcertsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newConcertsTableImpl("", "excluded", ""),
	}
}

func newConcertsTableImpl(schemaName, tableName, alias string) concertsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		NameColumn      = postgres.StringColumn("name")
		DateColumn      = postgres.TimestampzColumn("date")
		VenueColumn     = postgres.StringColumn("venue")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, DateColumn, VenueColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, DateColumn, VenueColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return concertsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		Date:      DateColumn,
		Venue:     VenueColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
