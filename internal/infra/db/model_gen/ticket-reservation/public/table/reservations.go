//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Reservations = newReservationsTable("public", "reservations", "")

type reservationsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	SeatID     postgres.ColumnString
	SessionID  postgres.ColumnString
	Status     postgres.ColumnString
	ReservedAt postgres.ColumnTimestampz
	ExpiresAt  postgres.ColumnTimestampz
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ReservationsTable struct {
	reservationsTable

	EXCLUDED reservationsTable
}

// AS creates new ReservationsTable with assigned alias
func (a ReservationsTable) AS(alias string) *ReservationsTable {
	return newReservationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReservationsTable with assigned schema name
func (a ReservationsTable) FromSchema(schemaName string) *ReservationsTable {
	return newReservationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReservationsTable with assigned table prefix
func (a ReservationsTable) WithPrefix(prefix string) *ReservationsTable {
	return newReservationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReservationsTable with assigned table suffix
func (a ReservationsTable) WithSuffix(suffix string) *ReservationsTable {
	return newReservationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReservationsTable(schemaName, tableName, alias string) *ReservationsTable {
	return &ReservationsTable{
		reservationsTable: newReservationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newReservationsTableImpl("", "excluded", ""),
	}
}

func newReservationsTableImpl(schemaName, tableName, alias string) reservationsTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		SeatIDColumn     = postgres.StringColumn("seat_id")
		SessionIDColumn  = postgres.StringColumn("session_id")
		StatusColumn     = postgres.StringColumn("status")
		ReservedAtColumn = postgres.TimestampzColumn("reserved_at")
		ExpiresAtColumn  = postgres.TimestampzColumn("expires_at")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, SeatIDColumn, SessionIDColumn, StatusColumn, ReservedAtColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{SeatIDColumn, SessionIDColumn, StatusColumn, ReservedAtColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns   = postgres.ColumnList{IDColumn, ReservedAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return reservationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		SeatID:     SeatIDColumn,
		SessionID:  SessionIDColumn,
		Status:     StatusColumn,
		ReservedAt: ReservedAtColumn,
		ExpiresAt:  ExpiresAtColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
