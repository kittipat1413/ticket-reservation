//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Zones = newZonesTable("public", "zones", "")

type zonesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	ConcertID   postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ZonesTable struct {
	zonesTable

	EXCLUDED zonesTable
}

// AS creates new ZonesTable with assigned alias
func (a ZonesTable) AS(alias string) *ZonesTable {
	return newZonesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ZonesTable with assigned schema name
func (a ZonesTable) FromSchema(schemaName string) *ZonesTable {
	return newZonesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ZonesTable with assigned table prefix
func (a ZonesTable) WithPrefix(prefix string) *ZonesTable {
	return newZonesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ZonesTable with assigned table suffix
func (a ZonesTable) WithSuffix(suffix string) *ZonesTable {
	return newZonesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newZonesTable(schemaName, tableName, alias string) *ZonesTable {
	return &ZonesTable{
		zonesTable: newZonesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newZonesTableImpl("", "excluded", ""),
	}
}

func newZonesTableImpl(schemaName, tableName, alias string) zonesTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ConcertIDColumn   = postgres.StringColumn("concert_id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, ConcertIDColumn, NameColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{ConcertIDColumn, NameColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return zonesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ConcertID:   ConcertIDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
