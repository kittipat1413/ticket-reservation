// Code generated by MockGen. DO NOT EDIT.
// Source: ./sql_execer.go

// Package db_mocks is a generated GoMock package.
package db_mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSqlExecer is a mock of SqlExecer interface.
type MockSqlExecer struct {
	ctrl     *gomock.Controller
	recorder *MockSqlExecerMockRecorder
}

// MockSqlExecerMockRecorder is the mock recorder for MockSqlExecer.
type MockSqlExecerMockRecorder struct {
	mock *MockSqlExecer
}

// NewMockSqlExecer creates a new mock instance.
func NewMockSqlExecer(ctrl *gomock.Controller) *MockSqlExecer {
	mock := &MockSqlExecer{ctrl: ctrl}
	mock.recorder = &MockSqlExecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlExecer) EXPECT() *MockSqlExecerMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockSqlExecer) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockSqlExecerMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockSqlExecer)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *MockSqlExecer) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSqlExecerMockRecorder) GetContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSqlExecer)(nil).GetContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockSqlExecer) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockSqlExecerMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockSqlExecer)(nil).SelectContext), varargs...)
}
