// Code generated by MockGen. DO NOT EDIT.
// Source: ./transactor.go

// Package db_mocks is a generated GoMock package.
package db_mocks

import (
	context "context"
	reflect "reflect"
	db "ticket-reservation/internal/infra/db"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransactor) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactorMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactor)(nil).Commit))
}

// DB mocks base method.
func (m *MockTransactor) DB() *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockTransactorMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockTransactor)(nil).DB))
}

// Rollback mocks base method.
func (m *MockTransactor) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactorMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactor)(nil).Rollback))
}

// MockSqlxTransactor is a mock of SqlxTransactor interface.
type MockSqlxTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockSqlxTransactorMockRecorder
}

// MockSqlxTransactorMockRecorder is the mock recorder for MockSqlxTransactor.
type MockSqlxTransactorMockRecorder struct {
	mock *MockSqlxTransactor
}

// NewMockSqlxTransactor creates a new mock instance.
func NewMockSqlxTransactor(ctrl *gomock.Controller) *MockSqlxTransactor {
	mock := &MockSqlxTransactor{ctrl: ctrl}
	mock.recorder = &MockSqlxTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlxTransactor) EXPECT() *MockSqlxTransactorMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockSqlxTransactor) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSqlxTransactorMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSqlxTransactor)(nil).Commit))
}

// DB mocks base method.
func (m *MockSqlxTransactor) DB() *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockSqlxTransactorMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockSqlxTransactor)(nil).DB))
}

// Rollback mocks base method.
func (m *MockSqlxTransactor) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSqlxTransactorMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSqlxTransactor)(nil).Rollback))
}

// MockSqlxTransactorFactory is a mock of SqlxTransactorFactory interface.
type MockSqlxTransactorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSqlxTransactorFactoryMockRecorder
}

// MockSqlxTransactorFactoryMockRecorder is the mock recorder for MockSqlxTransactorFactory.
type MockSqlxTransactorFactoryMockRecorder struct {
	mock *MockSqlxTransactorFactory
}

// NewMockSqlxTransactorFactory creates a new mock instance.
func NewMockSqlxTransactorFactory(ctrl *gomock.Controller) *MockSqlxTransactorFactory {
	mock := &MockSqlxTransactorFactory{ctrl: ctrl}
	mock.recorder = &MockSqlxTransactorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlxTransactorFactory) EXPECT() *MockSqlxTransactorFactoryMockRecorder {
	return m.recorder
}

// CreateSqlxTransactor mocks base method.
func (m *MockSqlxTransactorFactory) CreateSqlxTransactor(ctx context.Context, opts ...db.TxOptions) (db.SqlxTransactor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSqlxTransactor", varargs...)
	ret0, _ := ret[0].(db.SqlxTransactor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSqlxTransactor indicates an expected call of CreateSqlxTransactor.
func (mr *MockSqlxTransactorFactoryMockRecorder) CreateSqlxTransactor(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlxTransactor", reflect.TypeOf((*MockSqlxTransactorFactory)(nil).CreateSqlxTransactor), varargs...)
}
