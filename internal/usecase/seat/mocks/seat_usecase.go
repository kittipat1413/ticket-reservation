// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package seat_usecasemocks is a generated GoMock package.
package seat_usecasemocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	usecase "ticket-reservation/internal/usecase/seat"

	gomock "github.com/golang/mock/gomock"
)

// MockSeatUsecase is a mock of SeatUsecase interface.
type MockSeatUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSeatUsecaseMockRecorder
}

// MockSeatUsecaseMockRecorder is the mock recorder for MockSeatUsecase.
type MockSeatUsecaseMockRecorder struct {
	mock *MockSeatUsecase
}

// NewMockSeatUsecase creates a new mock instance.
func NewMockSeatUsecase(ctrl *gomock.Controller) *MockSeatUsecase {
	mock := &MockSeatUsecase{ctrl: ctrl}
	mock.recorder = &MockSeatUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatUsecase) EXPECT() *MockSeatUsecaseMockRecorder {
	return m.recorder
}

// ReserveSeat mocks base method.
func (m *MockSeatUsecase) ReserveSeat(ctx context.Context, input usecase.ReserveSeatInput) (*entity.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveSeat", ctx, input)
	ret0, _ := ret[0].(*entity.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveSeat indicates an expected call of ReserveSeat.
func (mr *MockSeatUsecaseMockRecorder) ReserveSeat(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveSeat", reflect.TypeOf((*MockSeatUsecase)(nil).ReserveSeat), ctx, input)
}
