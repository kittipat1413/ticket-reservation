// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package concert_usecasemocks is a generated GoMock package.
package concert_usecasemocks

import (
	context "context"
	reflect "reflect"
	entity "ticket-reservation/internal/domain/entity"
	usecase "ticket-reservation/internal/usecase/concert"

	gomock "github.com/golang/mock/gomock"
)

// MockConcertUsecase is a mock of ConcertUsecase interface.
type MockConcertUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockConcertUsecaseMockRecorder
}

// MockConcertUsecaseMockRecorder is the mock recorder for MockConcertUsecase.
type MockConcertUsecaseMockRecorder struct {
	mock *MockConcertUsecase
}

// NewMockConcertUsecase creates a new mock instance.
func NewMockConcertUsecase(ctrl *gomock.Controller) *MockConcertUsecase {
	mock := &MockConcertUsecase{ctrl: ctrl}
	mock.recorder = &MockConcertUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcertUsecase) EXPECT() *MockConcertUsecaseMockRecorder {
	return m.recorder
}

// CreateConcert mocks base method.
func (m *MockConcertUsecase) CreateConcert(ctx context.Context, concert usecase.CreateConcertInput) (*entity.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConcert", ctx, concert)
	ret0, _ := ret[0].(*entity.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConcert indicates an expected call of CreateConcert.
func (mr *MockConcertUsecaseMockRecorder) CreateConcert(ctx, concert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConcert", reflect.TypeOf((*MockConcertUsecase)(nil).CreateConcert), ctx, concert)
}

// FindAllConcerts mocks base method.
func (m *MockConcertUsecase) FindAllConcerts(ctx context.Context, input usecase.FindAllConcertsInput) (entity.Page[entity.Concert], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllConcerts", ctx, input)
	ret0, _ := ret[0].(entity.Page[entity.Concert])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllConcerts indicates an expected call of FindAllConcerts.
func (mr *MockConcertUsecaseMockRecorder) FindAllConcerts(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllConcerts", reflect.TypeOf((*MockConcertUsecase)(nil).FindAllConcerts), ctx, input)
}

// FindOneConcert mocks base method.
func (m *MockConcertUsecase) FindOneConcert(ctx context.Context, id usecase.FindOneConcertInput) (*entity.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneConcert", ctx, id)
	ret0, _ := ret[0].(*entity.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneConcert indicates an expected call of FindOneConcert.
func (mr *MockConcertUsecaseMockRecorder) FindOneConcert(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneConcert", reflect.TypeOf((*MockConcertUsecase)(nil).FindOneConcert), ctx, id)
}
